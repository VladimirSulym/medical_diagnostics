name: Django CI/CD

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4.2.2

      - name: Set up Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
#          pipx install poetry
#          poetry config virtualenvs.create false
#          poetry install --no-interaction --no-root
#          poetry add --group lint flake8

      - name: Run Flake8
        run: flake8 --max-line-length=119 --ignore=E203,W503 --exclude=.git,__pycache__,venv,.venv,migrations services/ users/ config/


#  test:
#    runs-on: ubuntu-latest
#    needs: lint
#
#    env:
#      SECRET_KEY: ${{ secrets.SECRET_KEY }}
#      DEBUG: ${{ secrets.DEBUG }}
#      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
#      DATABASE_USER: ${{ secrets.DATABASE_USER }}
#      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
#      DATABASE_HOST: localhost
#      DATABASE_PORT: 5432
##      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
##      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
##      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
##      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
##      EMAIL_USE_SSL: ${{ secrets.EMAIL_USE_SSL }}
#
#    services:
#      postgres:
#        image: postgres:latest
#        env:
#          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
#          POSTGRES_USER: ${{ secrets.DATABASE_USER }}
#          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
#        ports:
#          - 5432:5432
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#
#    steps:
#    - name: Check out code
#      uses: actions/checkout@v4.2.2
#
#    - name: Set up Python
#      uses: actions/setup-python@v5.6.0
#      with:
#        python-version: '3.12'
#
##    - name: Cache pip
##      uses: actions/cache@v4.2.3
##      with:
##        path: ~/.cache/pip
##        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
##        restore-keys: |
##            ${{ runner.os }}-pip-
#
#    - name: Install Dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements.txt
#
#    - name: Run migrations
#      run: python manage.py migrate
#
#    - name: Run tests
#      run: python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Check out code
      uses: actions/checkout@v4.2.2

    - name: Create .env file
      run: |
        echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
        echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
        echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
        echo "DATABASE_HOST=postgres" >> .env
        echo "DATABASE_PORT=5432" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DEBUG=${{ secrets.DEBUG }}" >> .env

    - name: Login to Docker Hub
      uses: docker/login-action@v3.4.0
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.10.0

    - name: Build Docker Compose image
      run: |
        docker compose build

    - name: Push Docker Compose image
      run: |
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/web:latest
#        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/celery:latest
#        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/celery-beat:latest
#        docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/web ${{ secrets.DOCKER_HUB_USERNAME }}/web:${{ github.sha }}
#        docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/celery ${{ secrets.DOCKER_HUB_USERNAME }}/celery:${{ github.sha }}
#        docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/celery-beat ${{ secrets.DOCKER_HUB_USERNAME }}/celery-beat:${{ github.sha }}
#        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/web:${{ github.sha }}
#        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/celery:${{ github.sha }}
#        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/celery-beat:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4.2.2

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

#    - name: Create .env file
#      run: |
#        echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
#        echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
#        echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
#        echo "DATABASE_HOST=postgres" >> .env
#        echo "DATABASE_PORT=5432" >> .env
#        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
#        echo "DEBUG=${{ secrets.DEBUG }}" >> .env
#
#    - name: Copy configuration files
#      uses: appleboy/scp-action@v1.0.0
#      with:
#        host: ${{ secrets.SERVER_HOST }}
#        username: ${{ secrets.SERVER_USERNAME }}
#        key: ${{ secrets.SSH_PRIVATE_KEY }}
#        source: "docker-compose.yml,Dockerfile,.env"
#        target: "~/app"
#        strip_components: 0
#        overwrite: true

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.2.2
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/django/medical_diagnostics/
          git pull
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/web:latest
          docker compose down || true
          docker system prune -f
          docker compose up -d

#    - name: Log in to Docker Hub
#      run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
#
#    - name: Build Docker images
#      run: docker compose build
#
#    - name: Set up QEMU
#      uses: docker/setup-qemu-action@v1
#
#    - name: Push Docker images
#      uses: docker/build-push-action@v2
#      with:
#        context: .
#        push: true
#        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
#
#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#
#    env:
#      SECRET_KEY: ${{ secrets.SECRET_KEY }}
#      DEBUG: ${{ secrets.DEBUG }}
#      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
#      DATABASE_USER: ${{ secrets.DATABASE_USER }}
#      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
#      DATABASE_HOST: localhost
#      DATABASE_PORT: 5432
#      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
#      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
#      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
#      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
#      EMAIL_USE_SSL: ${{ secrets.EMAIL_USE_SSL }}
#
#    steps:
#      - name: Add known hosts
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
#
#      - name: Set up SSH
#        uses: webfactory/ssh-agent@v0.9.0
#        with:
#          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
#
#      - name: Deploy to Server
#        run: |
#          ssh -t -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}
#          << 'EOF'
#          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
#          docker stop myapp || true
#          docker rm myapp || true
#          docker compose up -d
#          EOF
